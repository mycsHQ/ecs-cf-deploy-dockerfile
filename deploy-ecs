#!/bin/bash

source mycs-functions

# Default
VERSION="0.1.0"
VERBOSE=false
AWS_CLI=$(which aws)
AWS_ECS="$AWS_CLI --output json ecs"
AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-eu-west-1}
AWS_ASSUME_ROLE=true
COUNT=1

usage () {
cat <<EOM
-- deploy --

Deploy an ecs-service in the ecs-cluster

Required arguments:
    -p  | --repo                  Name of the repo
    -b  | --branch                Branch that needs to be deployed
    -t  | --task-path             Path to the file describing the task definition
    -c  | --cluster-name          Name of cloudformation stack containing the ecs cluster to deploy
    -a  | --account               ID of the account to assume the role
    -ar | --assume-role-name      Name of the role to assume
    -sn | --service-name          Name of the service stack

Optional arguments:
    -k  | --aws-access-key        AWS Access Key ID. May also be set as environment variable AWS_ACCESS_KEY_ID
    -s  | --aws-secret-key        AWS Secret Access Key. May also be set as environment variable AWS_SECRET_ACCESS_KEY
    -r  | --region                AWS Region Name. May also be set as environment variable AWS_DEFAULT_REGION or use the default eu-west-1
    -v  | --verbose               Display debugging information (basically each command)
    -co | --count                 Amount of tasks to create for that service (default to 1)

Requirements:
    git:  Git CLI
    aws:  AWS Command Line Interface
    jq:   Command-line JSON processor

Example:
    deploy-ecs -sn example-api -c example-cluster -a 1234465780 -ar assumeRoleName -r us-west-1 -p example-api -b test

Author:
  Julien Abega <julien@mycs.com>

License:
  MIT (check LICENSE.md)
EOM
    exit 3
}



# Check that all required variables/combinations are set
assertRequiredArgumentsSet () {

    # AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_DEFAULT_REGION and AWS_PROFILE can be set as environment variables
    if [ -z ${AWS_ACCESS_KEY_ID+x} ]; then unset AWS_ACCESS_KEY_ID; fi
    if [ -z ${AWS_SECRET_ACCESS_KEY+x} ]; then unset AWS_SECRET_ACCESS_KEY; fi
    if [ -z ${AWS_DEFAULT_REGION+x} ];
      then unset AWS_DEFAULT_REGION
      else
              AWS_ECS="$AWS_ECS --region $AWS_DEFAULT_REGION"
    fi
    if [ -z ${AWS_PROFILE+x} ];
      then unset AWS_PROFILE
      else
              AWS_ECS="$AWS_ECS --profile $AWS_PROFILE"
    fi

    if [ -z "${ECS_CLUSTER_STACK:-}" ]; then
        echo "CLUSTER is required. You can pass the value using -c or --cluster"
        exit 6
    fi
    if [ -z "${ECS_SERVICE_STACK:-}" ]; then
        echo "SERVICE is required. You can pass the value using -sn or --service-name"
        exit 5
    fi
    if [ -z "${ACCOUNT_ID:-}" ]; then
        echo "ACCOUNT is required. You can pass the value using -a or --account"
        exit 7
    fi
    if [ -z "${CROSS_ACCOUNT_ROLE:-}" ]; then
        echo "ROLE_NAME is required. You can pass the value using -ar or --assume-role-name"
        exit 8
    fi

    if [ -z "${BRANCH:-}" ]; then
        echo "BRANCH is required. You can pass the value using -b or --branch"
        exit 8
    fi

    if [ -z "${REPONAME:-}" ]; then
        echo "REPONAME is required. You can pass the value using -p or --repo"
        exit 8
    fi
}

deploy () {
  echo "Deployment of service in ecs cluster ..."

  setCommitMsg
  setTaskDefinition

  if echo $BRANCH | grep -E '^(production|staging|master)$'
  then
    echo "Service $ECS_SERVICE_STACK will be deployed because $BRANCH is a main branch"
    createService
    echo "Service $SERVICE_ARN deployment was initialized properly"
  elif echo $COMMIT_MSG | grep -E '\[deploy\]'
  then
    echo "Service $ECS_SERVICE_STACK will be deployed because [deploy] command was matched"
    createService
    echo "Service $SERVICE_ARN deployment was initialized properly"
  else
    echo "Service $ECS_SERVICE_STACK won't be deployed"
  fi
}

######################################################
# When not being tested, run application as expected #
######################################################
if [ -z "$TEST_ENV" ]; then
  set -o errexit
  set -u
  set -e
  # If no args are provided, display usage information
  if [ $# == 0 ]; then usage; fi

  # Check for AWS, AWS Command Line Interface
  require aws
  # Check for jq, Command-line JSON processor
  require jq
  # Check for git
  require git

  # Default values

  # Loop through arguments, two at a time for key and value
  while [[ $# -gt 0 ]]
  do
      key="$1"

      case $key in
          -b|--branch)
              BRANCH="$2"
              shift
              ;;
          -p|--repo)
              REPONAME="$2"
              shift
              ;;
          -sn|--service-name)
              ECS_SERVICE_STACK="$2"
              shift
              ;;
          -co|--count)
              COUNT="$2"
              shift
              ;;
          -c|--cluster-name)
              ECS_CLUSTER_STACK="$2"
              shift # past argument
              ;;
          -ar|--assume-role-name)
              CROSS_ACCOUNT_ROLE="$2"
              shift # past argument
              ;;
          -a|--account)
              ACCOUNT_ID="$2"
              shift # past argument
              ;;
          -k|--aws-access-key)
              AWS_ACCESS_KEY_ID="$2"
              shift # past argument
              ;;
          -s|--aws-secret-key)
              AWS_SECRET_ACCESS_KEY="$2"
              shift # past argument
              ;;
          -r|--region)
              AWS_DEFAULT_REGION="$2"
              shift # past argument
              ;;
          -v|--verbose)
              VERBOSE=true
              ;;
          --version)
              echo ${VERSION}
              exit 0
              ;;
          *)
              echo "Found nothing, will display usage and exit"
              usage
              exit 2
          ;;
      esac
      shift # past argument or value
  done

  if [ $VERBOSE == true ]; then
      set -x
  fi

  # Check that required arguments are provided
  assertRequiredArgumentsSet

  if [[ "$AWS_ASSUME_ROLE" != false ]]; then
      assumeRole
  fi

  getClusterName

  deploy

  if [[ "$AWS_ASSUME_ROLE" != false ]]; then
      assumeRoleClean
  fi

  exit 0
fi
